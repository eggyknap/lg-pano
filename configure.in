AC_INIT(lg-pano.c)
AC_CONFIG_HEADER([config.h])
            
VERSION="0.8"
AC_SUBST(VERSION)

dnl find and test the C compiler
AC_PROG_CXX
AC_LANG_CPLUSPLUS
     
AC_PROG_MAKE_SET
               
AC_HEADER_STDC

AC_C_INLINE
AC_CHECK_FUNCS([memset])
AC_CHECK_FUNCS([mkfifo])
AC_CHECK_FUNCS([strstr])
AC_CHECK_FUNCS([unlink])
AC_CHECK_FUNCS([open])
AC_CHECK_FUNCS([read])
AC_CHECK_FUNCS([close])
AC_CHECK_FUNCS([strstr])
AC_CHECK_FUNCS([strcmp])
AC_CHECK_FUNCS([strdup])
AC_CHECK_FUNCS([strcasecmp])
AC_CHECK_FUNCS([pthread_create])
AC_CHECK_FUNCS([pthread_mutex_lock])
AC_CHECK_FUNCS([pthread_mutex_unlock])
AC_CHECK_FUNCS([setjmp])
AC_CHECK_FUNCS([longjmp])
AC_CHECK_FUNCS([powf])
AC_CHECK_FUNCS([dirname])
AC_CHECK_FUNCS([basename])
AC_CHECK_FUNCS([opendir])
AC_CHECK_FUNCS([readdir])
AC_CHECK_FUNCS([closedir])
AC_CHECK_HEADERS([SDL/SDL.h],,[AC_MSG_ERROR([Required development files for libSDL not found])])
AC_CHECK_HEADERS([GL/gl.h],,[AC_MSG_ERROR([Required development files for libGL not found])])

# XXX this should be better
CPPFLAGS_save="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $(pkg-config --cflags GraphicsMagick)"
AC_CHECK_HEADER([wand/magick_wand.h],,[AC_MSG_ERROR([Required development files for ImageMagick and/or GraphicsMagick not found])])
CPPFLAGS="$CPPFLAGS_save"

AC_CHECK_HEADERS([math.h])
AC_CHECK_HEADERS([pthread.h])
AC_CHECK_HEADERS([fcntl.h])
AC_CHECK_HEADERS([stdlib.h])
AC_CHECK_HEADERS([string.h])
AC_CHECK_HEADERS([unistd.h])
AC_CHECK_HEADERS([sys/types.h])
AC_CHECK_HEADERS([sys/stat.h])
AC_CHECK_HEADERS([setjmp.h])
AC_CHECK_HEADERS([libgen.h])
AC_CHECK_HEADERS([dirent.h])
# XXX Make imagemagick support possible 
AC_CHECK_LIB(GraphicsMagickWand,MagickReadImage,,[AC_MSG_ERROR([Required library GraphicsMagick not found])])
AC_CHECK_LIB(SDL,SDL_Init,,[AC_MSG_ERROR([Required library libSDL not found])])
AC_CHECK_LIB(GL,glBegin,,[AC_MSG_ERROR([Required library libgl not found])])
AC_C_CONST
AC_FUNC_MALLOC
AC_HEADER_STDBOOL
AC_PATH_X
AC_PROG_CC
AC_TYPE_UINT16_T

dnl read Makefile.in and write Makefile
AC_OUTPUT(Makefile)

